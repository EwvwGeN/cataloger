// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/EwvwGeN/cataloger/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// CategoryRepo is an autogenerated mock type for the categoryRepo type
type CategoryRepo struct {
	mock.Mock
}

// DeleteCategoryBycode provides a mock function with given fields: ctx, catCode
func (_m *CategoryRepo) DeleteCategoryBycode(ctx context.Context, catCode string) error {
	ret := _m.Called(ctx, catCode)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategoryBycode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, catCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCategories provides a mock function with given fields: ctx
func (_m *CategoryRepo) GetAllCategories(ctx context.Context) ([]models.Category, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCategories")
	}

	var r0 []models.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Category, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryByCode provides a mock function with given fields: ctx, catCode
func (_m *CategoryRepo) GetCategoryByCode(ctx context.Context, catCode string) (models.Category, error) {
	ret := _m.Called(ctx, catCode)

	if len(ret) == 0 {
		panic("no return value specified for GetCategoryByCode")
	}

	var r0 models.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Category, error)); ok {
		return rf(ctx, catCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Category); ok {
		r0 = rf(ctx, catCode)
	} else {
		r0 = ret.Get(0).(models.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, catCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCategory provides a mock function with given fields: ctx, category
func (_m *CategoryRepo) SaveCategory(ctx context.Context, category models.Category) error {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for SaveCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Category) error); ok {
		r0 = rf(ctx, category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCategoryByCode provides a mock function with given fields: ctx, catCode, catUpdateData
func (_m *CategoryRepo) UpdateCategoryByCode(ctx context.Context, catCode string, catUpdateData models.CategoryForPatch) error {
	ret := _m.Called(ctx, catCode, catUpdateData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategoryByCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.CategoryForPatch) error); ok {
		r0 = rf(ctx, catCode, catUpdateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCategoryRepo creates a new instance of CategoryRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryRepo {
	mock := &CategoryRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
