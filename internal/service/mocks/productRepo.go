// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/EwvwGeN/cataloger/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepo is an autogenerated mock type for the productRepo type
type ProductRepo struct {
	mock.Mock
}

// DeleteProductById provides a mock function with given fields: _a0, _a1
func (_m *ProductRepo) DeleteProductById(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProducts provides a mock function with given fields: _a0
func (_m *ProductRepo) GetAllProducts(_a0 context.Context) ([]models.Product, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Product, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: _a0, _a1
func (_m *ProductRepo) GetProductById(_a0 context.Context, _a1 string) (models.Product, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProductById")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Product, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByCategory provides a mock function with given fields: ctx, catCode
func (_m *ProductRepo) GetProductsByCategory(ctx context.Context, catCode string) ([]models.Product, error) {
	ret := _m.Called(ctx, catCode)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByCategory")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Product, error)); ok {
		return rf(ctx, catCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Product); ok {
		r0 = rf(ctx, catCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, catCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveProduct provides a mock function with given fields: _a0, _a1, _a2
func (_m *ProductRepo) SaveProduct(_a0 context.Context, _a1 models.Product, _a2 []int) (string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SaveProduct")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Product, []int) (string, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Product, []int) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Product, []int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductById provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ProductRepo) UpdateProductById(_a0 context.Context, _a1 string, _a2 models.ProductForPatch, _a3 []int) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.ProductForPatch, []int) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductRepo creates a new instance of ProductRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepo {
	mock := &ProductRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
